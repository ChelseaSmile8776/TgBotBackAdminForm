package com.example.bot.tele;

import com.example.bot.domain.FormType;
import com.example.bot.domain.Submission;
import com.example.bot.repo.SubmissionRepository;
import com.example.bot.service.AdminService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Comparator;
import java.util.List;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.time.format.DateTimeFormatter;
import java.time.ZoneId;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import java.time.*;
import java.util.*;
import java.util.Locale;
@Component
public class AdminBot extends TelegramLongPollingBot {

    private final String username;
    private final SubmissionRepository repo;
    private final AdminService adminService;

    private static final DateTimeFormatter YM_FMT = DateTimeFormatter.ofPattern("LLLL yyyy", new Locale("ru"));
    private static final DateTimeFormatter ISO_D = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    private static final DateTimeFormatter TS_FMT = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm").withZone(ZoneId.systemDefault());

    private static class RangePickState {
        YearMonth month;
        LocalDate start;
        LocalDate end;
    }
    private final Map<Long, RangePickState> rangePick = new HashMap<>();

    public AdminBot(@Value("${telegram.bot.token}") String token,
                    @Value("${telegram.bot.username}") String username,
                    SubmissionRepository repo,
                    AdminService adminService) {
        super(token);
        this.username = username;
        this.repo = repo;
        this.adminService = adminService;
        try {
            List<BotCommand> cmds = List.of(
                    new BotCommand("/start", "–Ω–∞—á–∞—Ç—å"),
                    new BotCommand("/help", "—Å–ø—Ä–∞–≤–∫–∞"),
                    new BotCommand("/whoami", "—É–∑–Ω–∞—Ç—å —Å–≤–æ–π chat_id"),
                    new BotCommand("/today", "–∑–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"),
                    new BotCommand("/last", "–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞"),
                    new BotCommand("/search", "–ø–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫"),
                    new BotCommand("/stats", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"),
                    new BotCommand("/listadmins", "—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"),
                    new BotCommand("/addadmin", "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç"),
                    new BotCommand("/acceptinvite", "–ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
            );
            execute(new SetMyCommands(cmds, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return username;
    }
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText().trim();
            long chatId = update.getMessage().getChatId();

            if (awaitingSearch.getOrDefault(chatId, false) && !text.startsWith("/")) {
                awaitingSearch.put(chatId, false);
                sendSearch(chatId, text);
                return;
            }

            if ("üîé –ü–æ–∏—Å–∫".equals(text)) {
                awaitingSearch.put(chatId, true);
                sendHtmlWithKb(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —Ñ—Ä–∞–∑—É –∏–∑ –≤–æ–ø—Ä–æ—Å–∞) ‚å®Ô∏è");
                return;
            } else if ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".equals(text)) {
                sendStatsMenu(chatId);
                return;
            } else if ("‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞".equals(text)) {
                sendHtmlWithKb(chatId, "‚≠êÔ∏è –†–∞–∑–¥–µ–ª –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ —Ç–∞—Ä–∏—Ñ—ã.");
                return;
            }

            String[] parts = text.split(" ", 2);
            String command = parts[0];

            switch (command) {
                case "/start" -> {
                    String username = (update.getMessage().getFrom() != null)
                            ? update.getMessage().getFrom().getUserName()
                            : null;
                    String payload = (text.length() > 6) ? text.substring(6).trim() : "";

                    if (!payload.isEmpty()) {
                        sendHtmlWithKb(chatId, adminService.handleAcceptInvite(chatId, payload, username));
                    } else {
                        sendHtmlWithKb(chatId,
                                "üëã –ü—Ä–∏–≤–µ—Ç!\n" +
                                        "–Ø –∞–¥–º–∏–Ω-–±–æ—Ç.\n" +
                                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.");
                    }
                }
                case "/acceptinvite" -> {
                    String username = (update.getMessage().getFrom() != null)
                            ? update.getMessage().getFrom().getUserName()
                            : null;

                    String codeArg = (parts.length > 1) ? parts[1] : null;
                    if (codeArg == null || codeArg.isBlank()) {
                        sendHtmlWithKb(chatId, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/acceptinvite –∫–æ–¥</code>");
                    } else {
                        sendHtmlWithKb(chatId, adminService.handleAcceptInvite(chatId, codeArg, username));
                    }
                }
                case "/whoami" -> sendHtmlWithKb(chatId, "üÜî –í–∞—à chat_id: <code>" + chatId + "</code>");
                case "/help" -> sendHtmlWithKb(chatId,
                        "üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>:\n\n" +
                                "üÜî /whoami ‚Äì —É–∑–Ω–∞—Ç—å —Å–≤–æ–π chat_id\n" +
                                "üìÖ /today ‚Äì –∑–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n" +
                                "üìù /last ‚Äì –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞\n" +
                                "üîé /search <code>—Ç–µ–∫—Å—Ç</code> ‚Äì –ø–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫\n" +
                                "üìä /stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n" +
                                "üë• /listadmins ‚Äì —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n" +
                                "‚ûï /addadmin ‚Äì —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç (—Ç–æ–ª—å–∫–æ SUPERADMIN)\n" +
                                "‚úÖ /acceptinvite <code>–∫–æ–¥</code> ‚Äì –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ");

                case "/today" -> sendToday(chatId);
                case "/last" -> sendLast(chatId);
                case "/search" -> {
                    if (parts.length < 2) {
                        awaitingSearch.put(chatId, true);
                        sendHtmlWithKb(chatId, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: <code>/search –ò–≤–∞–Ω</code>)");
                    } else {
                        sendSearch(chatId, parts[1]);
                    }
                }
                case "/stats" -> sendStatsMenu(chatId);
                case "/listadmins" -> sendHtmlWithKb(chatId, adminService.handleListAdmins());
                case "/addadmin" -> {
                    try {
                        UUID code = adminService.createInvite(chatId);

                        String deepLink = "https://t.me/" + getBotUsername() + "?start=" + code;

                        String shareText =
                                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n" +
                                        "ü§ù –ü—Ä–∏–≤–µ—Ç! –¢–µ–±—è –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n" +
                                        "üëâ –ù–∞–∂–º–∏ —Å—Å—ã–ª–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –∏ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n\n" +
                                        "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É:\n" +
                                        "/acceptinvite " + code + "\n"
 +
                                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";

                        String shareUrl = "https://t.me/share/url"
                                + "?url=" + java.net.URLEncoder.encode(deepLink, java.nio.charset.StandardCharsets.UTF_8)
                                + "&text=" + java.net.URLEncoder.encode(shareText, java.nio.charset.StandardCharsets.UTF_8);

                        InlineKeyboardMarkup kb = new InlineKeyboardMarkup(
                                java.util.List.of(
                                        java.util.List.of(
                                                InlineKeyboardButton.builder()
                                                        .text("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è").url(shareUrl).build())));

                        String msg = """
                                üîë <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>
                                –ö–æ–¥ –¥–ª—è –∫–æ–ª–ª–µ–≥–∏: <code>%s</code>

                                –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —Å—Å—ã–ª–∫—É –∏ –∫–æ–º–∞–Ω–¥—É.
                                """.formatted(code);

                        var sm = org.telegram.telegrambots.meta.api.methods.send.SendMessage.builder()
                                .chatId(Long.toString(chatId))
                                .parseMode("HTML")
                                .disableWebPagePreview(true)
                                .text(msg)
                                .replyMarkup(kb)
                                .build();
                        execute(sm);

                    } catch (IllegalStateException noRights) {
                        sendHtmlWithKb(chatId, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ (–Ω—É–∂–Ω–∞ —Ä–æ–ª—å <b>SUPERADMIN</b>).");
                    } catch (Exception e) {
                        sendHtmlWithKb(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                    }
                }
            }
        }
        if (update.hasCallbackQuery()) {
            String data = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();

            if (data.startsWith("cal:")) {
                RangePickState st = rangePick.computeIfAbsent(chatId, k -> {
                    RangePickState s = new RangePickState();
                    s.month = YearMonth.now();
                    return s;
                });

                try {
                    switch (data) {
                        case "cal:noop" -> {
                            // –∏–≥–Ω–æ—Ä
                        }
                        case "cal:nav:prev" -> {
                            st.month = st.month.minusMonths(1);
                            editCalendarMessage(update, st, currentCaption(st));
                        }
                        case "cal:nav:next" -> {
                            st.month = st.month.plusMonths(1);
                            editCalendarMessage(update, st, currentCaption(st));
                        }
                        case "cal:reset" -> {
                            st.start = null; st.end = null;
                            editCalendarMessage(update, st, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <b>–°</b> (–Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞):");
                        }
                        case "cal:ok" -> {
                            if (st.start != null && st.end != null) {
                                OffsetDateTime from = st.start.atStartOfDay().atOffset(ZoneOffset.UTC);
                                OffsetDateTime to   = st.end.plusDays(1).atStartOfDay().atOffset(ZoneOffset.UTC);
                                sendStatsByRange(chatId, from, to,
                                        "c " + st.start.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")) +
                                                " –ø–æ " + st.end.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")));
                                rangePick.remove(chatId);
                            }
                        }
                        default -> {
                            if (data.startsWith("cal:pick:")) {
                                LocalDate picked = LocalDate.parse(data.substring("cal:pick:".length()));
                                if (st.start == null) {
                                    st.start = picked;
                                    st.end = null;
                                    st.month = YearMonth.from(picked);
                                    editCalendarMessage(update, st, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <b>–ü–æ</b> (–∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞):");
                                } else if (st.end == null) {
                                    if (picked.isBefore(st.start)) {
                                        LocalDate tmp = st.start;
                                        st.start = picked;
                                        st.end = tmp;
                                    } else {
                                        st.end = picked;
                                    }
                                    st.month = YearMonth.from(picked);
                                    editCalendarMessage(update, st, "–ü–µ—Ä–∏–æ–¥ –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ</b> ‚úÖ");
                                } else {
                                    st.start = picked;
                                    st.end = null;
                                    st.month = YearMonth.from(picked);
                                    editCalendarMessage(update, st, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <b>–ü–æ</b> (–∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞):");
                                }
                            }
                        }
                    }
                } catch (Exception ignored) {}

                try {
                    execute(AnswerCallbackQuery.builder()
                            .callbackQueryId(update.getCallbackQuery().getId())
                            .text("–û–∫")
                            .showAlert(false)
                            .build());
                } catch (Exception ignored) {}
                return;
            }
            switch (data) {
                case "stats:today" -> {
                    OffsetDateTime from = LocalDate.now().atStartOfDay().atOffset(ZoneOffset.UTC);
                    OffsetDateTime to = LocalDate.now().plusDays(1).atStartOfDay().atOffset(ZoneOffset.UTC);
                    sendStatsByRange(chatId, from, to, "–∑–∞ —Å–µ–≥–æ–¥–Ω—è");
                }
                case "stats:week" -> {
                    LocalDate today = LocalDate.now();
                    OffsetDateTime from = today.minusDays(6).atStartOfDay().atOffset(ZoneOffset.UTC);
                    OffsetDateTime to = today.plusDays(1).atStartOfDay().atOffset(ZoneOffset.UTC);
                    sendStatsByRange(chatId, from, to, "–∑–∞ 7 –¥–Ω–µ–π");
                }
                case "stats:all" -> sendStatsAll(chatId);
                case "stats:custom" -> {
                    RangePickState st = new RangePickState();
                    st.month = YearMonth.now();
                    rangePick.put(chatId, st);
                    showCalendar(chatId, st, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <b>–°</b> (–Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞):");
                }
            }
            return;
        }
    }

    private void sendHtml(long chatId, String html) {
        SendMessage sm = SendMessage.builder()
                .chatId(Long.toString(chatId))
                .parseMode("HTML")
                .disableWebPagePreview(true)
                .text(html)
                .build();
        try { execute(sm); } catch (TelegramApiException e) { e.printStackTrace(); }
    }
    private void sendToday(long chatId) {
        LocalDate today = LocalDate.now();
        OffsetDateTime from = today.atStartOfDay().atOffset(ZoneOffset.UTC);
        OffsetDateTime to = today.plusDays(1).atStartOfDay().atOffset(ZoneOffset.UTC);

        List<Submission> subs = repo.findByDateRange(from, to);
        if (subs.isEmpty()) {
            sendHtml(chatId, "üì≠ –°–µ–≥–æ–¥–Ω—è –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.");
            return;
        }

        StringBuilder sb = new StringBuilder("üìÖ <b>–ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n");
        for (Submission s : subs) {
            sb.append(formatSubmission(s)).append("\n\n");
        }
        sendHtml(chatId, sb.toString());
    }

    private void sendLast(long chatId) {
        List<Submission> subs = repo.findAll(Sort.by(Sort.Direction.DESC, "createdAt"));
        if (subs.isEmpty()) {
            sendHtml(chatId, "üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.");
            return;
        }
        Submission s = subs.get(0);
        sendHtml(chatId, "üìù <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞</b>\n\n" + formatSubmission(s));
    }

    private void sendSearch(long chatId, String query) {
        if (query == null || query.isBlank()) {
            sendHtmlWithKb(chatId, "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.");
            return;
        }

        String q = query.trim();
        String qLower = q.toLowerCase();

        LocalDate dateFilter = parseDateQuery(q);
        final LocalDate finalDateFilter = dateFilter;

        List<Submission> all = repo.findAll();

        List<Submission> filtered = all.stream()
                .filter(s -> {
                    boolean textMatch =
                            (s.getName() != null && s.getName().toLowerCase().contains(qLower)) ||
                                    (s.getPhone() != null && s.getPhone().toLowerCase().contains(qLower)) ||
                                    (s.getQuestionText() != null && s.getQuestionText().toLowerCase().contains(qLower)) ||
                                    (s.getProductUrl() != null && s.getProductUrl().toLowerCase().contains(qLower)) ||
                                    (s.getProductSku() != null && s.getProductSku().toLowerCase().contains(qLower)) ||
                                    (s.getOrderIdSql() != null && String.valueOf(s.getOrderIdSql()).contains(qLower)) ||
                                    (s.getAmount() != null && String.valueOf(s.getAmount()).contains(qLower));
                    boolean dateMatch = false;
                    if (finalDateFilter != null && s.getCreatedAt() != null) {
                        LocalDate createdDate = s.getCreatedAt().toLocalDate();
                        dateMatch = createdDate.equals(finalDateFilter);
                    }

                    return textMatch || dateMatch;
                })
                .sorted(Comparator.comparing(Submission::getCreatedAt,
                        Comparator.nullsLast(Comparator.naturalOrder())).reversed())
                .limit(30)
                .toList();

        if (filtered.isEmpty()) {
            sendHtmlWithKb(chatId, "üîé –ü–æ –∑–∞–ø—Ä–æ—Å—É <b>" + escapeHtml(q) + "</b> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        StringBuilder sb = new StringBuilder("üîé –ù–∞–π–¥–µ–Ω–æ <b>")
                .append(filtered.size()).append("</b> –∑–∞—è–≤–æ–∫:\n\n");
        for (Submission s : filtered) {
            sb.append(formatSubmission(s)).append("\n\n");
        }
        sendHtmlWithKb(chatId, sb.toString());
    }

    private LocalDate parseDateQuery(String q) {
        try {
            // dd.MM.yyyy
            return LocalDate.parse(q.trim(), DateTimeFormatter.ofPattern("dd.MM.yyyy"));
        } catch (Exception ignore) {}
        try {
            // yyyy-MM-dd
            return LocalDate.parse(q.trim());
        } catch (Exception ignore) {}
        return null;
    }
    private String escapeHtml(String s) {
        return s.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;");
    }
    private String formatSubmission(Submission s) {
        String ts = s.getCreatedAt() != null
                ? "üïí " + TS_FMT.format(s.getCreatedAt()) + "\n"
                : "";

        return switch (s.getFormType()) {
            case A_CALLBACK -> "üìû <b>–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫</b>\n" +
                    ts +
                    "üë§ " + nz(s.getName()) + "\n" +
                    "üì± " + nz(s.getPhone());

            case B_CONSULT -> "‚ùì <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>\n" +
                    ts +
                    "üë§ " + nz(s.getName()) + "\n" +
                    "üì± " + nz(s.getPhone()) + "\n" +
                    "üí¨ " + nz(s.getQuestionText());

            case C_FAST_ORDER -> "üõí <b>–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑</b>\n" +
                    ts +
                    "üì¶ –ó–∞–∫–∞–∑: <code>" + nz(String.valueOf(s.getOrderIdSql())) + "</code>\n" +
                    "üîó " + nz(s.getProductUrl()) + "\n" +
                    "üí≤ " + nz(String.valueOf(s.getAmount())) + "\n" +
                    "üë§ " + nz(s.getName()) + "\n" +
                    "üì± " + nz(s.getPhone());
        };
    }

    private String nz(String v) {
        return v == null ? "" : v;
    }

    private final Map<Long, Boolean> awaitingSearch = new ConcurrentHashMap<>();

    private ReplyKeyboardMarkup mainKeyboard() {
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üîé –ü–æ–∏—Å–∫"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"));
        row2.add(new KeyboardButton("‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞"));

        ReplyKeyboardMarkup kb = new ReplyKeyboardMarkup();
        kb.setKeyboard(List.of(row1, row2));
        kb.setResizeKeyboard(true);
        kb.setSelective(false);
        return kb;
    }

    private void sendHtmlWithKb(long chatId, String html) {
        SendMessage sm = SendMessage.builder()
                .chatId(Long.toString(chatId))
                .parseMode("HTML")
                .disableWebPagePreview(true)
                .text(html)
                .replyMarkup(mainKeyboard())
                .build();
        try { execute(sm); } catch (TelegramApiException e) { e.printStackTrace(); }
    }

    private InlineKeyboardMarkup statsKeyboard() {
        InlineKeyboardButton b1 = InlineKeyboardButton.builder().text("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è").callbackData("stats:today").build();
        InlineKeyboardButton b2 = InlineKeyboardButton.builder().text("üóì –ó–∞ –Ω–µ–¥–µ–ª—é").callbackData("stats:week").build();
        InlineKeyboardButton b3 = InlineKeyboardButton.builder().text("‚àû –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è").callbackData("stats:all").build();
        InlineKeyboardButton b4 = InlineKeyboardButton.builder().text("‚úçÔ∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥").callbackData("stats:custom").build();

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(b1, b2));
        rows.add(List.of(b3));
        rows.add(List.of(b4));

        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);
        return kb;
    }

    private void sendStatsMenu(long chatId) {
        SendMessage sm = SendMessage.builder()
                .chatId(Long.toString(chatId))
                .parseMode("HTML")
                .text("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:")
                .replyMarkup(statsKeyboard())
                .build();
        try { execute(sm); } catch (TelegramApiException e) { e.printStackTrace(); }
    }
    private void sendStatsByRange(long chatId, OffsetDateTime from, OffsetDateTime to, String label) {
        List<Submission> subs = repo.findByDateRange(from, to);

        long countA = subs.stream().filter(s -> s.getFormType() == FormType.A_CALLBACK).count();
        long countB = subs.stream().filter(s -> s.getFormType() == FormType.B_CONSULT).count();
        long countC = subs.stream().filter(s -> s.getFormType() == FormType.C_FAST_ORDER).count();

        String msg = """
            üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ %s</b>
            ‚è±Ô∏è <code>%s</code> ‚Äî <code>%s</code>
            
            üìû –û–±—Ä–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏: <b>%d</b>
            ‚ùì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: <b>%d</b>
            üõí –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–∫–∞–∑—ã: <b>%d</b>
            üì¶ –ò—Ç–æ–≥–æ: <b>%d</b>
            """.formatted(
                label,
                fmtTs(from), fmtTs(to.minusSeconds(1)),
                countA, countB, countC, subs.size()
        );

        sendHtmlWithKb(chatId, msg);
    }

    private void sendStatsAll(long chatId) {
        List<Submission> subs = repo.findAll();
        if (subs.isEmpty()) {
            sendHtmlWithKb(chatId, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
            return;
        }
        long countA = subs.stream().filter(s -> s.getFormType() == FormType.A_CALLBACK).count();
        long countB = subs.stream().filter(s -> s.getFormType() == FormType.B_CONSULT).count();
        long countC = subs.stream().filter(s -> s.getFormType() == FormType.C_FAST_ORDER).count();

        Submission oldest = subs.stream().min(Comparator.comparing(Submission::getCreatedAt)).get();
        Submission newest = subs.stream().max(Comparator.comparing(Submission::getCreatedAt)).get();

        String msg = """
            üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è</b>
            ‚è±Ô∏è <code>%s</code> ‚Äî <code>%s</code>
            
            üìû –û–±—Ä–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏: <b>%d</b>
            ‚ùì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: <b>%d</b>
            üõí –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–∫–∞–∑—ã: <b>%d</b>
            üì¶ –ò—Ç–æ–≥–æ: <b>%d</b>
            """.formatted(
                fmtTs(oldest.getCreatedAt()),
                fmtTs(newest.getCreatedAt()),
                countA, countB, countC, subs.size()
        );

        sendHtmlWithKb(chatId, msg);
    }

    private static final DateTimeFormatter TS =
            DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm").withZone(ZoneId.systemDefault());

    private String fmtTs(Instant i) { return TS.format(i); }
    private String fmtTs(OffsetDateTime odt) { return TS.format(odt.toInstant()); }

    private void editCalendarMessage(Update update, RangePickState st, String caption) {
        EditMessageText em = EditMessageText.builder()
                .chatId(update.getCallbackQuery().getMessage().getChatId().toString())
                .messageId(update.getCallbackQuery().getMessage().getMessageId())
                .parseMode("HTML")
                .text("üìÖ <b>" + st.month.format(YM_FMT) + "</b>\n" + caption)
                .replyMarkup(buildCalendarMarkup(st))
                .build();
        try { execute(em); } catch (Exception ignored) {}
    }

    private String currentCaption(RangePickState st) {
        if (st.start == null) return "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <b>–°</b> (–Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞):";
        if (st.end == null)   return "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É <b>–ü–æ</b> (–∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞):";
        return "–ü–µ—Ä–∏–æ–¥ –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ</b> ‚úÖ";
    }

    private void showCalendar(long chatId, RangePickState st, String caption) {
        InlineKeyboardMarkup kb = buildCalendarMarkup(st);
        SendMessage sm = SendMessage.builder()
                .chatId(Long.toString(chatId))
                .parseMode("HTML")
                .text("üìÖ <b>" + st.month.format(YM_FMT) + "</b>\n" + caption)
                .replyMarkup(kb)
                .build();
        try { execute(sm); } catch (Exception ignored) {}
    }

    private InlineKeyboardMarkup buildCalendarMarkup(RangePickState st) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(List.of(
                InlineKeyboardButton.builder().text("¬´").callbackData("cal:nav:prev").build(),
                InlineKeyboardButton.builder().text(st.month.format(YM_FMT)).callbackData("cal:noop").build(),
                InlineKeyboardButton.builder().text("¬ª").callbackData("cal:nav:next").build()
        ));

        rows.add(List.of(
                txt("–ü–Ω"), txt("–í—Ç"), txt("–°—Ä"), txt("–ß—Ç"), txt("–ü—Ç"), txt("–°–±"), txt("–í—Å")
        ));

        LocalDate first = st.month.atDay(1);
        int shift = (first.getDayOfWeek().getValue() + 6) % 7; // —Å–¥–µ–ª–∞—Ç—å –ü–Ω=0 ‚Ä¶ –í—Å=6
        LocalDate cursor = first.minusDays(shift);
        for (int r = 0; r < 6; r++) {
            List<InlineKeyboardButton> week = new ArrayList<>();
            for (int c = 0; c < 7; c++) {
                boolean inMonth = cursor.getMonth() == st.month.getMonth();
                String label = String.valueOf(cursor.getDayOfMonth());
                String data = "cal:pick:" + ISO_D.format(cursor);

                if (st.start != null && st.end != null && !cursor.isBefore(st.start) && !cursor.isAfter(st.end)) {
                    label = "‚Ä¢" + label + "‚Ä¢";
                } else if (st.start != null && cursor.equals(st.start)) {
                    label = "[" + label + "]";
                } else if (st.end != null && cursor.equals(st.end)) {
                    label = "[" + label + "]";
                } else if (!inMonth) {
                    label = " " + label + " ";
                }

                week.add(InlineKeyboardButton.builder()
                        .text(label)
                        .callbackData(data)
                        .build());
                cursor = cursor.plusDays(1);
            }
            rows.add(week);
        }

        List<InlineKeyboardButton> last = new ArrayList<>();
        last.add(InlineKeyboardButton.builder().text("‚Ü∫ –°–±—Ä–æ—Å").callbackData("cal:reset").build());
        if (st.start != null && st.end != null) {
            last.add(InlineKeyboardButton.builder().text("‚úÖ –ì–æ—Ç–æ–≤–æ").callbackData("cal:ok").build());
        }
        rows.add(last);

        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);
        return kb;
    }

    private InlineKeyboardButton txt(String t) {
        return InlineKeyboardButton.builder().text(t).callbackData("cal:noop").build();
    }
}