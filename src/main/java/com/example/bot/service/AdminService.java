package com.example.bot.service;

import com.example.bot.domain.Admin;
import com.example.bot.domain.Invite;
import com.example.bot.repo.AdminRepository;
import com.example.bot.repo.InviteRepository;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class AdminService {

    private final AdminRepository adminRepo;
    private final InviteRepository inviteRepo;
    private final List<Long> initialAdmins;

    public AdminService(AdminRepository adminRepo,
                        InviteRepository inviteRepo,
                        @Value("${app.admins:}") List<Long> initialAdmins) {
        this.adminRepo = adminRepo;
        this.inviteRepo = inviteRepo;
        this.initialAdmins = initialAdmins;
    }

    @PostConstruct
    @Transactional
    public void seedInitialAdmins() {
        if (initialAdmins == null || initialAdmins.isEmpty()) return;
        for (int i = 0; i < initialAdmins.size(); i++) {
            Long chatId = initialAdmins.get(i);
            if (chatId == null) continue;
            if (!adminRepo.existsByChatId(chatId)) {
                Admin admin = new Admin();
                admin.setChatId(chatId);
                admin.setRole(i == 0 ? "SUPERADMIN" : "ADMIN");
                // username –Ω–µ –∑–Ω–∞–µ–º ‚Äî –æ—Å—Ç–∞–≤–∏–º null
                adminRepo.save(admin);
            }
        }
    }

    public boolean isSuperAdmin(Long chatId) {
        if (chatId == null) return false;
        return adminRepo.findByChatId(chatId)
                .map(a -> "SUPERADMIN".equalsIgnoreCase(a.getRole()))
                .orElse(false);
    }

    /** –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ */
    public String handleListAdmins() {
        List<Admin> admins = adminRepo.findAll();
        if (admins.isEmpty()) return "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";

        StringBuilder sb = new StringBuilder("üõ° <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b>\n");
        for (Admin a : admins) {
            sb.append("‚Ä¢ <code>").append(a.getChatId()).append("</code> ");
            if (a.getUsername() != null && !a.getUsername().isBlank()) {
                sb.append("(@").append(a.getUsername()).append(") ");
            }
            sb.append("(").append(a.getRole()).append(")\n");
        }
        return sb.toString();
    }

    @Transactional
    public String handleAddAdmin(Long requesterChatId) {
        if (!isSuperAdmin(requesterChatId)) {
            return "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ (–Ω—É–∂–Ω–∞ —Ä–æ–ª—å <b>SUPERADMIN</b>).";
        }
        Invite invite = new Invite();
        invite.setCode(UUID.randomUUID());
        invite.setCreatedBy(requesterChatId);
        invite.setCreatedAt(Instant.now());
        inviteRepo.save(invite);

        UUID code = invite.getCode();
        return """
               üîë <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>
               –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —ç—Ç–æ—Ç –∫–æ–¥:

               <code>%s</code>

               –ó–∞—Ç–µ–º –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É:
               <code>/acceptinvite %s</code>
               """.formatted(code, code);
    }

    private String sanitizeInviteCode(String raw) {
        if (raw == null) return "";
        String s = raw.trim();

        // —É–±—Ä–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–µ —é–Ω–∏–∫–æ–¥-—Å–∏–º–≤–æ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã, soft hyphen –∏ –ø—Ä.
        s = s
                .replace("\u200B", "")  // zero width space
                .replace("\u200C", "")
                .replace("\u200D", "")
                .replace("\uFEFF", "")
                .replace("\u00AD", ""); // soft hyphen

        // –∑–∞–º–µ–Ω–∏—Ç—å —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–µ —Ç–∏—Ä–µ –Ω–∞ –æ–±—ã—á–Ω—ã–π –º–∏–Ω—É—Å
        s = s.replace('‚Äî','-').replace('‚Äì','-').replace('‚àí','-');

        // —É–±—Ä–∞—Ç—å –≤—Å—ë, —á—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä–∞/–ª–∞—Ç–∏–Ω—Å–∫–∞—è –±—É–∫–≤–∞ a-f/–¥–µ—Ñ–∏—Å
        s = s.replaceAll("[^0-9A-Fa-f-]", "");

        // –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å 32-—Å–∏–º–≤–æ–ª—å–Ω—ã–π HEX –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤ -> –≤—Å—Ç–∞–≤–∏–º –¥–µ—Ñ–∏—Å—ã –ø–æ –º–∞—Å–∫–µ UUID
        if (s.matches("(?i)^[0-9a-f]{32}$")) {
            s = s.replaceFirst("(?i)(.{8})(.{4})(.{4})(.{4})(.{12})", "$1-$2-$3-$4-$5");
        }

        return s;
    }

    @Transactional
    public String handleAcceptInvite(Long chatId, String codeRaw, String username) {
        if (chatId == null) return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à chat_id.";

        String cleaned = sanitizeInviteCode(codeRaw);
        if (cleaned.isBlank()) {
            return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/acceptinvite –∫–æ–¥</code>";
        }

        UUID code;
        try {
            code = UUID.fromString(cleaned);
        } catch (IllegalArgumentException e) {
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: <code>/acceptinvite 123e4567-e89b-12d3-a456-426614174000</code>";
        }

        var opt = inviteRepo.findByCode(code);
        if (opt.isEmpty()) return "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.";
        var inv = opt.get();

        if (inv.getUsedAt() != null) {
            return "‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.";
        }

        // —É–∂–µ –∞–¥–º–∏–Ω?
        if (adminRepo.existsByChatId(chatId)) {
            inv.setUsedBy(chatId);
            inv.setUsedAt(Instant.now());
            inviteRepo.save(inv);
            return "‚ÑπÔ∏è –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ö–æ–¥ –ø–æ–º–µ—á–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º.";
        }

        // —Å–æ–∑–¥–∞—ë–º –∞–¥–º–∏–Ω–∞
        var a = new Admin();
        a.setChatId(chatId);
        a.setRole("ADMIN");
        a.setUsername(username); // –µ—Å–ª–∏ –ø–æ–ª–µ –¥–æ–±–∞–≤–∏–ª–∏
        adminRepo.save(a);

        inv.setUsedBy(chatId);
        inv.setUsedAt(Instant.now());
        inviteRepo.save(inv);

        return "‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!";
    }

    private String normalizeUsername(String u) {
        if (u == null) return null;
        String s = u.trim();
        if (s.isEmpty()) return null;
        if (s.startsWith("@")) s = s.substring(1);
        return s;
    }

    @Transactional
    public UUID createInvite(Long requesterChatId) {
        if (!isSuperAdmin(requesterChatId)) {
            throw new IllegalStateException("NO_SUPERADMIN");
        }
        Invite invite = new Invite();
        invite.setCode(UUID.randomUUID());
        invite.setCreatedBy(requesterChatId);
        invite.setCreatedAt(Instant.now());
        inviteRepo.save(invite);
        return invite.getCode();
    }
}